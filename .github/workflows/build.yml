name: Reusable build workflow

on:
  workflow_call:
    inputs:
      pylint_enabled:
        type: boolean
        required: false
        default: false
      check_displays:
        type: boolean
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniconda-version: 'py39_4.10.3'
      - run: |
          conda config --remove channels defaults
          conda config --append channels conda-forge

      - name: cache venv
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.poetry/env
          key: ${{ runner.os }}-env-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/environment.yml') }}

      - name: setup
        run: |
          export SHELL=$SHELL # for python to be able to access the bash version
          chmod +x env-init.sh
          ./env-init.sh -y --verbose

      - name: linting
        if: ${{ inputs.pylint_enabled }}
        run: |
          eval "$(conda shell.bash hook)"
          conda activate $PWD/.venv
          source ~/.poetry/env
          find src -type f -name '*.py' -exec sed -i s/# MAGIC $/# MAGIC/g {} \\;
          poe pylint

      - name: check displays
        if: ${{ inputs.check_displays }}
        run: |
          if grep -Prz ",[\s]*display[ ]*=[ ]*True[,]?[\s]*[)]" --include="*.py" src; then
            echo "When commiting, make sure all @dp.transformation displays are set to False, display=True should be used for debug only."
            exit 1
          else
            echo "All good."
          fi

      - name: decorator indent check
        run: |
          if grep -Prn "^[\s]+@(dp.)?(transformation|notebook_function)" --include="*.py" src; then
            echo "It is always a bad idea to indent decorated functions to use them in ifs, for loops, ... You can do better than that!"
            exit 1
          else
            echo "All good."
          fi


      - name: container checks
        run: |
          eval "$(conda shell.bash hook)"
          conda activate $PWD/.venv
          source ~/.poetry/env
          ~/.poetry/bin/poetry install --no-root --no-dev # remove all dev dependencies
          pip install https://daipe-packages.s3.eu-central-1.amazonaws.com/databricks-connect-9.1.2.tar.gz # pyspark is still needed
          pip install poethepoet
          poe container-check
